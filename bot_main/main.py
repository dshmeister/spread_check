from bot_token import BOT_TOKEN as token
#import telebot
import telebot
from functions import *
from keyboards import *
#from variables import *

bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start'])
def start_message(message):
    '''
    function starts the bot
    '''
    user_id = message.chat.id
    bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}! ‚úå", reply_markup=keyboard_main)
    bot.send_message(user_id, welcome_message)

    if check_user_new(user_id) == True:
        add_user_to_db(user_id)


@bot.message_handler(commands=['pay'])
def payment_check(message):
    """
    function checks
    """
    user_id = message.chat.id
    if check_payment_actual(user_id) == True:
        bot.send_message(user_id, f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞. –û–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {check_date_of_actuality_payment(user_id, mode=1)}')
    else:
        bot.send_message(user_id, f'–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –µ–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫')
    payment(message)


def payment(message):
    """
    function that recieve payment from user
    """
    pass


@bot.message_handler(commands=['exchanger'])
def exchanger(message):
    """
    function gives user contacts of exchanger
    """
    bot.send_message(message.chat.id, exchanger_message)

    
@bot.message_handler(commands=['spread'])
def add_spread(message):
    """
    function that checks spread
    """
    bot.send_message(message.chat.id, '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: <b>'+str(check_spread(message.chat.id))+'</b>', parse_mode='html')
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ø—Ä–µ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
    bot.register_next_step_handler(msg, set_spread)


@bot.message_handler(commands=['bundle'])
def choose_bundle(message):
    """
    function of choosing bundles
    """
    bund = check_user_bundle(message.chat.id)[1:-1]
    if bund == 'None':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:', reply_markup=bundles)
    else:
        bot.send_message(message.chat.id, f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã: {bund}')
        bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –ø–∞—Ä—É —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å: ', reply_markup=bundles)


@bot.callback_query_handler(func=lambda call: call.data in coins)
def token(call):
    """
    function allows user to add or delete bundle
    """
    resp = add_del_bundle(call.message.chat.id, 'RUB/'+ call.data)
    if resp == 'del':
        bot.send_message(call.message.chat.id, '–°–≤—è–∑–∫–∞ <b>RUB/'+call.data+'</b> —É–¥–∞–ª–µ–Ω–∞.', parse_mode="html")
    else:
        bot.send_message(call.message.chat.id, '–°–≤—è–∑–∫–∞ <b>RUB/'+call.data+'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.', parse_mode="html")
    choose_bundle(call.message)



@bot.message_handler(commands=['exchange'])
def choose_exchange(message):
    """
    function of choosing exchanges
    """
    pass



def check_actual_api(message):
    """
    function checks which APIs are added to bot
    """
    pass


@bot.message_handler(commands=['minsum'])
def choose_min_sum(message):
    """
    function of choosing min_sum
    """
    bot.send_message(message.chat.id, '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞: <b>'+str(check_min_sum(message.chat.id))+'</b>', parse_mode='html')
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–Ω–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')


def choose_min_sum_again(message):
    """
    function of choosing min_sum
    """
    bot.send_message(message.chat.id, '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞: <b>'+str(check_min_sum(message.chat.id))+'</b>', parse_mode='html')
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–µ –∏–∑–º–µ–Ω–∏—Ç—å')


def set_min_sum(message):
    """
    function checks sets the min_sum
    """
    set_min_sum_db(message.chat.id, message.text)
    choose_min_sum_again(message)
    
def set_spread(message):
    """
    function that adds spread to db
    """
    adding_spread(message.chat.id, message.text)
    bot.send_message(message.chat.id, '–í–∞—à —Å–ø—Ä–µ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


    
def set_spread_again(message):
    """
    function that checks spread
    """
    bot.send_message(message.chat.id, '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: <b>'+str(check_spread(message.chat.id))+'</b>', parse_mode='html')
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ø—Ä–µ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')



@bot.message_handler(commands=['api'])
def add_api(message):
    """
    function adds APIs
    """
    pass


def actual_exchanges(message):
    """
    function checks what exchanges are in work
    """
    pass


@bot.message_handler(commands=['support_FAQ'])
def tech_support_FAQ(message):
    """
    function gives gives file FAQ
    """
    bot.send_message(message.chat.id, 'https://telegra.ph/FAQ-C4Crypto-bot-11-22')
    bot.send_message(message.chat.id, '–ù–∞—à–ª–∏ –≤ —Ñ–∞–π–ª–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å?', reply_markup=kb_tech)
    pass


@bot.callback_query_handler(func=lambda call: call.data == 'support')
# @bot.message_handler(commands=['support'])
def tech_support(call):
    """
    function gives contacts of technical supports
    """
    bot.send_message(call.message.chat.id, tech_sup_message)



@bot.message_handler(content_types=['text'])
def message_reply(message):
    """
    function checks messages, and sends user to needed func
    """
    # bot.send_message(message.chat.id, "&&&&&&")
    if message.text == '–í—ã–±—Ä–∞—Ç—å —Å–≤—è–∑–∫—É üíµ‚õìüí∂':
        choose_bundle(message)
    elif message.text == '–í—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂—É üí∏':
        choose_exchange(message)
    elif message.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É üí∞':
        choose_min_sum(message)
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å API ‚Äçüíª':
        add_api(message)
    elif message.text == '–û–±–º–µ–Ω–Ω–∏–∫ ‚Äçüí±':
        exchanger(message)
    elif message.text == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äçü¶∫':
        tech_support_FAQ(message)
    elif message.text == '–í—ã–±—Ä–∞—Ç—å —Å–ø—Ä–µ–¥üìà':
        add_spread(message)
    elif message.text.isdigit() == True:
        set_min_sum(message)
    elif message.text.isdigit() == True and int(message.text) <= 1:
        set_spread(message)



if __name__ == "__main__":
    bot.infinity_polling()

